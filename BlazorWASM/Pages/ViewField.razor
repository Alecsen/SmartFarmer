@page "/ViewField"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@inject IFieldService fieldService
@inject IUserService userService

@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <h3>ViewField</h3>
    
    @if (fields == null)
    {
        <p>Loading...</p>
    }
    else if (!fields.Any())
    {
        <p>No fields to display</p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Field name</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in fields)
            {
                <tr>
                    <td>@item.FieldName</td>
                </tr>
            }
            </tbody>
        </table>
    }
    @if (!string.IsNullOrEmpty(msg))
    {
        <label style="color: red">@msg</label>
    }
    
</AuthorizeView>

@code {
    private IEnumerable<FieldLookupDto>? fields;
    private string msg = "";
    private int currentUserId;
    private string currentUsername;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        currentUsername = user.Identity?.Name ?? "UnknownUser";

        currentUserId = await userService.GetCurrentUserId();
        
        try
        {
            fields = await fieldService.GetFieldsByUserId(currentUserId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}