@page "/"
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFieldService fieldService
@inject IUserService userService
<PageTitle>Index</PageTitle>

<h1>Velkommen til Smart Farmer!</h1>

<div class="dashboard-container">
    @if (fields != null && fields.Any())
    {
        var topFields = fields.OrderBy(f => f.MoistureLevel).Take(3);
        foreach (var field in topFields)
        {
            <div class="field-card">
                <h3>@field.FieldName</h3>
                <p>Field Capacity: @field.FieldCapacity</p>
                <RadzenProgressBar Unit="@GetProgressBarUnit(field)" class=".rz-color-black"  Value="@field.MoistureLevel" Max="field.FieldCapacity" Style="height: 20px"  Color="@(field.MoistureLevel < 5 ? "red" : (field.MoistureLevel > 5 ? "yellow" : "green"))" />
            </div>
        }
    }
    else
    {
        <p>@msg</p>
    }
</div>


@code{
    
    private IEnumerable<FieldLookupDto>? fields;
    private string msg = "";
    private int currentUserId;

    protected override async Task OnInitializedAsync()
    {
        currentUserId = await userService.GetCurrentUserId();
        
        try
        {
            fields = await fieldService.GetFieldsByUserId(currentUserId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private string GetProgressBarUnit(FieldLookupDto field)
    {
        return $" ud af {field.FieldCapacity}";
    }

}