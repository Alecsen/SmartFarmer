@inject IJSRuntime JSRuntime
@inject IFieldService fieldService
@inject IUserService userService
@inject NavigationManager navMgr;

@page "/MapView"
@using HttpClients.ClientInterfaces
@using Domain.DTOs

@if (currentUserId == -1)
{
    <p>Loading...</p>
}
else
{
    <AuthorizeView>
        <Header>
            <h3>Dine marker</h3>
            <div>Her kan du se et overblik over alle dine marker og du har mulighed for at filtrere, ændre og slette marker</div>
        </Header>

        <div id="mapid" style="height: 400px;"></div>

        <div class="buttons">
            <NavLink class="btn btn-primary" href="FieldView">Tilføj mark</NavLink>
            <button class="btn">Rediger mark</button>
            <button class="btn">Slet mark</button>
            <button class="btn">Importer marker</button>
        </div>

        <h2>Dine marker</h2>
        <div class="flex-container">
            @if (fields != null)
            {
                foreach (var item in fields)
                {
                    <div class="fields-container" @onclick="() => ViewField(item.Id.ToString())">
                        <table class="fields-table">
                            <tr>
                                <td>
                                    <b>@item.FieldName</b>
                                </td>
                            </tr>
                            <tr>
                                <td style="width: 30%;"><b>Crop type</b>:</td>
                                <td style="width: 70%;">
                                    <div class="field-value">@item.CropType</div>
                                </td>
                            </tr>
                            <tr>
                                <td style="width: 30%;">
                                    <b>Area:</b>
                                </td>
                                <td style="width: 70%;">
                                    <div class="field-value">@item.Area</div>
                                </td>
                            </tr>
                        </table>
                    </div>
                }
            }
        </div>
    </AuthorizeView>
}

@code {
    private IEnumerable<FieldLookupDto>? fields;
    private int currentUserId;
    private string msg = "";
    private ElementReference mapElement;

    protected override async Task OnInitializedAsync()
    {
        currentUserId = await userService.GetCurrentUserId();

        try
        {
            fields = await fieldService.GetFieldsByUserId(currentUserId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
    // This method is called whenever parameters are set, including when navigating to the page
    // You can perform additional actions here, such as calling JavaScript interop methods
        await JSRuntime.InvokeVoidAsync("initializeMap");
        await DrawAllPolygons();
    }

    private async Task DrawAllPolygons()
    {
        if (fields != null)
        {
            var coordinateStrings = fields.Where(field => !string.IsNullOrWhiteSpace(field.locationData))
                .Select(field => field.locationData)
                .ToList();

            await JSRuntime.InvokeVoidAsync("drawPolygons", coordinateStrings);
        }
    }

    private void ViewField(string fieldId)
    {
        Console.WriteLine("Dette er det valgte fieldId: " + fieldId);
        navMgr.NavigateTo($"/ViewField/{fieldId}");
    }

}