@inject IJSRuntime JSRuntime
@inject IFieldService fieldService
@inject IUserService userService
@inject ISensorService sensorService

@page "/MapView"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Models
<AuthorizeView>
<h3>Dine marker</h3>

<div id="mapid" style="height: 400px;"></div>

 <div class="buttons">
        <NavLink class="btn btn-primary" href="FieldView">Tilføj mark</NavLink>
        <button class="btn">Rediger mark</button>
        <button class="btn">Slet mark</button>
        <button class="btn">Importer marker</button>
    </div>
    
    
</AuthorizeView>
@code {
    private IEnumerable<FieldLookupDto>? fields;
    private IEnumerable<SensorLookupDto>? sensors;
    private int currentUserId;
    private string msg = "";
    private ElementReference mapElement;
    private string geoLocationData = null;

    protected override async Task OnInitializedAsync()
    {
        currentUserId = await userService.GetCurrentUserId();

        try
        {
            fields = await fieldService.GetFieldsByUserId(currentUserId);
          
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeMap");
            await DrawAllPolygons();
            await AddPoint();
        }
    }

    private async Task DrawAllPolygons()
    {
        if (fields != null)
        {
            foreach (var field in fields)
            {
                if (!string.IsNullOrWhiteSpace(field.locationData))
                {
                    await JSRuntime.InvokeVoidAsync("drawPolygonFromCoordinateString", field.locationData);
                    fields = await fieldService.GetFieldsByUserId(currentUserId);
                    sensors = await sensorService.GetSensorsByFieldId(field.Id);
                }
            }
            await JSRuntime.InvokeVoidAsync("zoomToFitAllFields");
        }
    }
    private async Task AddPoint()
    {
        if (sensors != null)
        {
            foreach (var sensor in sensors)
            {
                double latitude = sensor.Latitude;
                double longitude = sensor.Longitude;
                double moistureLevel = sensor.MoistureLevel;
            
                await JSRuntime.InvokeVoidAsync("addPointToMap", latitude, longitude, moistureLevel);
            }
        }
        
    }
}

