@inject IJSRuntime JSRuntime
@inject IFieldService fieldService
@inject IUserService userService
@inject ISensorService sensorService

@page "/MapView"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Models
<AuthorizeView>
<h3>Dine marker</h3>

<div id="mapid" style="height: 400px;"></div>

 <div class="buttons">
        <NavLink class="btn btn-primary" href="FieldView">Tilføj mark</NavLink>
        <button class="btn">Rediger mark</button>
        <button class="btn">Slet mark</button>
        <button class="btn">Importer marker</button>
    </div>
    
    
</AuthorizeView>
@code {
    private IEnumerable<FieldLookupDto>? fields;
    private IEnumerable<SensorLookupDto>? sensors;
    private int currentUserId;
    private string msg = "";
    private ElementReference mapElement;
    private string geoLocationData = null;
    private string testData = "(-100.123, 50.456), (-100.789, 50.456), (-100.789, 50.123), (-100.123, 50.123)";
    
    protected override async Task OnInitializedAsync()
    {
        currentUserId = await userService.GetCurrentUserId();

        try
        {
            fields = await fieldService.GetFieldsByUserId(currentUserId);
            if (fields != null)
            {
                try
                {
                    foreach (FieldLookupDto field in fields)
                    {
                        sensors = await sensorService.GetSensorsByFieldId(field.Id);
                    }
                    
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    msg = e.Message;
                }
            }
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
    // This method is called whenever parameters are set, including when navigating to the page
    // You can perform additional actions here, such as calling JavaScript interop methods
            await JSRuntime.InvokeVoidAsync("initializeMap");
            await DrawAllPolygons();
            await AddPoint();
        
    }

    private async Task DrawAllPolygons()
    {
        if (fields != null)
        {
            var coordinateStrings = fields.Where(field => !string.IsNullOrWhiteSpace(field.locationData))
                .Select(field => field.locationData)
                .ToList();

            await JSRuntime.InvokeVoidAsync("drawPolygons", coordinateStrings);
        }
    }
    private async Task AddPoint()
    {
        if (sensors != null)
        {
            foreach (var sensor in sensors)
            {
                double latitude = sensor.Latitude;
                double longitude = sensor.Longitude;
                double moistureLevel = sensor.MoistureLevel;
                Console.WriteLine($"this is a sensor with location {latitude} {longitude}");
                await JSRuntime.InvokeVoidAsync("addPointToMap", latitude, longitude, moistureLevel);
            }
        }
        
    }
}

